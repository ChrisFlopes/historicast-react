{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Christian\\\\ruby_projects\\\\weather_react_frontend\\\\weather-app\\\\src\\\\TemperatureChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureChart = ({\n  data\n}) => {\n  _s();\n  const [chartDimensions, setChartDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  useEffect(() => {\n    const updateDimensions = () => {\n      setChartDimensions({\n        width: window.innerWidth * 0.9,\n        height: window.innerHeight * 0.4\n      });\n    };\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n    };\n  }, []);\n  const chartData = data.hourly.time.map((time, index) => ({\n    time: new Date(time),\n    temperature: data.hourly.temperature_2m[index]\n  }));\n  const firstDate = chartData[0][\"time\"];\n  const lastDate = chartData[chartData.length - 1][\"time\"];\n  const formatDate = date => {\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const day = date.getDate();\n    const monthIndex = date.getMonth();\n    const year = date.getFullYear();\n    return `${monthNames[monthIndex]} ${day.toString().padStart(2, \"0\")} ${year}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tempChart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Temperature Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tempChartWrapper\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: chartDimensions.width,\n        height: chartDimensions.height,\n        data: chartData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\",\n          label: {\n            value: `${formatDate(firstDate)} - ${formatDate(lastDate)}`,\n            position: 'insideBottom'\n          },\n          tick: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: 'Temp (°C)',\n            angle: -90,\n            position: 'insideLeft'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          position: \"top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          position: \"top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"temperature\",\n          stroke: \"#8884d8\",\n          dot: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureChart, \"hEK1G3K0ZFejCBERDOKCEYR0480=\");\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","TemperatureChart","data","_s","chartDimensions","setChartDimensions","width","height","updateDimensions","window","innerWidth","innerHeight","addEventListener","removeEventListener","chartData","hourly","time","map","index","Date","temperature","temperature_2m","firstDate","lastDate","length","formatDate","date","monthNames","day","getDate","monthIndex","getMonth","year","getFullYear","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","dataKey","label","value","position","tick","angle","type","stroke","dot","_c","$RefreshReg$"],"sources":["C:/Users/Christian/ruby_projects/weather_react_frontend/weather-app/src/TemperatureChart.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nconst TemperatureChart = ({ data }) => {\r\n  const [chartDimensions, setChartDimensions] = useState({ width: 0, height: 0 });\r\n\r\n  useEffect(() => {\r\n    const updateDimensions = () => {\r\n      setChartDimensions({\r\n        width: window.innerWidth * 0.9,\r\n        height: window.innerHeight * 0.4,\r\n      });\r\n    };\r\n\r\n    updateDimensions();\r\n\r\n    window.addEventListener('resize', updateDimensions);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', updateDimensions);\r\n    };\r\n  }, []);\r\n\r\n  const chartData = data.hourly.time.map((time, index) => ({\r\n    time: new Date(time),\r\n    temperature: data.hourly.temperature_2m[index],\r\n  }));\r\n\r\n  const firstDate = chartData[0][\"time\"]\r\n  const lastDate = chartData[chartData.length - 1][\"time\"]\r\n\r\n  const formatDate = (date) => {\r\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n    const day = date.getDate();\r\n    const monthIndex = date.getMonth();\r\n    const year = date.getFullYear();\r\n    return `${monthNames[monthIndex]} ${day.toString().padStart(2, \"0\")} ${year}`;\r\n  };\r\n\r\n  return (\r\n    <div className='tempChart'>\r\n      <h2>Temperature Chart</h2>\r\n      <div className='tempChartWrapper'>\r\n        <LineChart \r\n          width={chartDimensions.width}\r\n          height={chartDimensions.height} \r\n          data={chartData}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\" label={{ value: `${formatDate(firstDate)} - ${formatDate(lastDate)}`, position: 'insideBottom'}} tick={false} />\r\n          <YAxis label={{ value: 'Temp (°C)', angle: -90, position: 'insideLeft' }} />\r\n          <Tooltip position=\"top\" />\r\n          <Legend position=\"top\" />\r\n          <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" dot={false} />\r\n        </LineChart>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}